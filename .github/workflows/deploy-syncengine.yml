name: Deploy Azure Function App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Target environment
        required: true
        type: choice
        options:
          - FODJ-DEV
          - FODJ-TST
          - FODJ-ACC
          - FODJ-PRD

permissions:
      id-token: write
      contents: read

env:
  PATH_REPO: ./
  FOLDER_FUNCTION: CoSP.AzFunctions
  FUNCTION_APP_NAME: fatestpoc
  RESOURCE_GROUP: POC

jobs:
  deploy-to-target-environment:
    name: Deploy to ${{ github.event.inputs.environment }} environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.PATH_REPO }}
          lfs: false

      - name: Set Target Environment tag
        run: |
          case "${{ github.event.inputs.environment }}" in
            FODJ-DEV) echo "TARGET_ENV_SHORT=dev" >> $GITHUB_ENV;;
            FODJ-TST)     echo "TARGET_ENV_SHORT=tst" >> $GITHUB_ENV;;
            FODJ-ACC)  echo "TARGET_ENV_SHORT=acc" >> $GITHUB_ENV;;
            FODJ-PRD)  echo "TARGET_ENV_SHORT=prd" >> $GITHUB_ENV;;
            *)           echo "Unknown environment"; exit 1;;
          esac          
      
      - name: Load Environment Configuration
        id: config
        run: |          
          CONFIG_FILE="${{ env.PATH_REPO }}/Function App Parameters/parameters_${{ env.TARGET_ENV_SHORT }}.json"
                    
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Extract configuration values from JSON parameters
          COSP_SYNCENGINE_CERTIFICATE=$(jq -r '.CoSP_SyncEngine_Certificate.value' "$CONFIG_FILE")
         

      - name: Verify .NET SDK
        run: |
          command -v dotnet >/dev/null 2>&1 || { echo ".NET SDK not found; install on runner"; exit 1; }
          dotnet --version

      - name: Install Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true
      
      - name: Verify Core Tools
        run: |
          command -v func >/dev/null 2>&1 || { echo "Azure Functions Core Tools not found; install on runner"; exit 1; }
          func --version

      - name: Az Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Configure Function App Settings
        run: |
          echo "Configuring Function App Settings for ${{ env.FUNCTION_APP_NAME }}"
          
          # Set basic function app settings
          az functionapp config appsettings set \
            --name "${{ env.FUNCTION_APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --settings \
              FUNCTIONS_WORKER_RUNTIME="powershell" \
              FUNCTIONS_EXTENSION_VERSION="~4" \
              WEBSITE_RUN_FROM_PACKAGE="1" \
              AZURE_FUNCTIONS_ENVIRONMENT="${{ github.event.inputs.environment }}" \
              CoSP_SyncEngine_Certificate="${{ env.COSP_SYNCENGINE_CERTIFICATE }}"

      - name: Publish to Azure
        working-directory: ${{ env.PATH_REPO }}/${{ env.FOLDER_FUNCTION }}
        run: |
          func azure functionapp publish "${{ env.FUNCTION_APP_NAME }}" --powershell
        env:
          AzureWebJobsScriptRoot: "."

      - name: Confirm deployment
        run: |
          echo "ðŸŽ‰ Successfully deployed Function App: ${{ env.FUNCTION_APP_NAME }}"

      - name: logout
        run: |
          az logout